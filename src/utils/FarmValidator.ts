// üîç Validador para dados de fazenda

import { ValidationResult, ValidationErrors, FarmFormState } from '../types/farmTypes';

/**
 * Classe respons√°vel pela valida√ß√£o dos dados do formul√°rio de fazenda
 */
export class FarmValidator {
  
  /**
   * Valida todos os dados do formul√°rio
   * @param formData - Dados do formul√°rio
   * @returns Resultado da valida√ß√£o
   */
  static validateAll(formData: FarmFormState): ValidationResult {
    const errors: ValidationErrors = {};
    
    // Validar dados da fazenda
    const farmErrors = this.validateFarm(formData);
    Object.assign(errors, farmErrors);
    
    // Validar dados do usu√°rio
    const userErrors = this.validateUser(formData);
    Object.assign(errors, userErrors);
    
    // Validar dados do endere√ßo
    const addressErrors = this.validateAddress(formData);
    Object.assign(errors, addressErrors);
    
    // Validar telefones
    const phoneErrors = this.validatePhones(formData);
    Object.assign(errors, phoneErrors);
    
    return {
      isValid: Object.keys(errors).length === 0,
      errors
    };
  }
  
  /**
   * Valida dados do capril
   */
  static validateFarm(formData: FarmFormState): ValidationErrors {
    const errors: ValidationErrors = {};
    
    // Nome do capril
    if (!formData.farmName.trim()) {
      errors.farmName = 'Nome do capril √© obrigat√≥rio';
    } else if (formData.farmName.length < 3) {
      errors.farmName = 'Nome do capril deve ter pelo menos 3 caracteres';
    } else if (formData.farmName.length > 100) {
      errors.farmName = 'Nome do capril deve ter no m√°ximo 100 caracteres';
    }
    
    // C√≥digo TOD (obrigat√≥rio)
    if (!formData.farmTod.trim()) {
      errors.farmTod = 'C√≥digo TOD √© obrigat√≥rio';
    } else if (formData.farmTod.length < 3) {
      errors.farmTod = 'C√≥digo TOD deve ter pelo menos 3 caracteres';
    } else if (formData.farmTod.length > 50) {
      errors.farmTod = 'C√≥digo TOD deve ter no m√°ximo 50 caracteres';
    }
    
    return errors;
  }
  
  /**
   * Valida dados do usu√°rio
   */
  static validateUser(formData: FarmFormState): ValidationErrors {
    const errors: ValidationErrors = {};
    
    // Nome do usu√°rio
    if (!formData.userName.trim()) {
      errors.userName = 'Nome √© obrigat√≥rio';
    } else if (formData.userName.length < 2) {
      errors.userName = 'Nome deve ter pelo menos 2 caracteres';
    } else if (formData.userName.length > 100) {
      errors.userName = 'Nome deve ter no m√°ximo 100 caracteres';
    } else if (!/^[a-zA-Z√Ä-√ø\s]+$/.test(formData.userName)) {
      errors.userName = 'Nome deve conter apenas letras e espa√ßos';
    }
    
    // Email
    if (!formData.userEmail.trim()) {
      errors.userEmail = 'Email √© obrigat√≥rio';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.userEmail)) {
      errors.userEmail = 'Email deve ter um formato v√°lido';
    } else if (formData.userEmail.length > 255) {
      errors.userEmail = 'Email deve ter no m√°ximo 255 caracteres';
    }
    
    // CPF
    if (!formData.userCpf.trim()) {
      errors.userCpf = 'CPF √© obrigat√≥rio';
    } else if (!this.isValidCPF(formData.userCpf)) {
      errors.userCpf = 'CPF deve ter um formato v√°lido';
    }
    
    // Senha
    if (!formData.userPassword) {
      errors.userPassword = 'Senha √© obrigat√≥ria';
    } else if (formData.userPassword.length < 6) {
      errors.userPassword = 'Senha deve ter pelo menos 6 caracteres';
    } else if (formData.userPassword.length > 50) {
      errors.userPassword = 'Senha deve ter no m√°ximo 50 caracteres';
    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(formData.userPassword)) {
      errors.userPassword = 'Senha deve conter pelo menos uma letra min√∫scula, uma mai√∫scula e um n√∫mero';
    }
    
    // Confirma√ß√£o de senha
    if (!formData.userConfirmPassword) {
      errors.userConfirmPassword = 'Confirma√ß√£o de senha √© obrigat√≥ria';
    } else if (formData.userPassword !== formData.userConfirmPassword) {
      errors.userConfirmPassword = 'Senhas n√£o coincidem';
    }
    
    // Fun√ß√£o/Papel
    if (!formData.userRoles.trim()) {
      errors.userRoles = 'Fun√ß√£o √© obrigat√≥ria';
    } else if (!['ROLE_ADMIN', 'ROLE_MANAGER', 'ROLE_OPERATOR'].includes(formData.userRoles)) {
      errors.userRoles = 'Fun√ß√£o deve ser Administrador, Gerente ou Operador';
    }
    
    return errors;
  }
  
  /**
   * Valida dados do endere√ßo
   */
  static validateAddress(formData: FarmFormState): ValidationErrors {
    const errors: ValidationErrors = {};
    
    // Rua
    if (!formData.addressStreet.trim()) {
      errors.addressStreet = 'Rua √© obrigat√≥ria';
    } else if (formData.addressStreet.length < 5) {
      errors.addressStreet = 'Rua deve ter pelo menos 5 caracteres';
    } else if (formData.addressStreet.length > 200) {
      errors.addressStreet = 'Rua deve ter no m√°ximo 200 caracteres';
    }
    
    // Complemento (opcional)
    if (formData.addressComplement && formData.addressComplement.length > 100) {
      errors.addressComplement = 'Complemento deve ter no m√°ximo 100 caracteres';
    }
    
    // Bairro
    if (!formData.addressNeighborhood.trim()) {
      errors.addressNeighborhood = 'Bairro √© obrigat√≥rio';
    } else if (formData.addressNeighborhood.length < 2) {
      errors.addressNeighborhood = 'Bairro deve ter pelo menos 2 caracteres';
    } else if (formData.addressNeighborhood.length > 100) {
      errors.addressNeighborhood = 'Bairro deve ter no m√°ximo 100 caracteres';
    }
    
    // Cidade
    if (!formData.addressCity.trim()) {
      errors.addressCity = 'Cidade √© obrigat√≥ria';
    } else if (formData.addressCity.length < 2) {
      errors.addressCity = 'Cidade deve ter pelo menos 2 caracteres';
    } else if (formData.addressCity.length > 100) {
      errors.addressCity = 'Cidade deve ter no m√°ximo 100 caracteres';
    }
    
    // Estado
    if (!formData.addressState.trim()) {
      errors.addressState = 'Estado √© obrigat√≥rio';
    } else if (formData.addressState.length !== 2) {
      errors.addressState = 'Estado deve ter exatamente 2 caracteres';
    }
    
    // CEP
    if (!formData.addressPostalCode.trim()) {
      errors.addressPostalCode = 'CEP √© obrigat√≥rio';
    } else if (!this.isValidCEP(formData.addressPostalCode)) {
      errors.addressPostalCode = 'CEP deve ter um formato v√°lido (XXXXX-XXX)';
    }
    
    // Pa√≠s
    if (!formData.addressCountry.trim()) {
      errors.addressCountry = 'Pa√≠s √© obrigat√≥rio';
    } else if (formData.addressCountry.length < 2) {
      errors.addressCountry = 'Pa√≠s deve ter pelo menos 2 caracteres';
    } else if (formData.addressCountry.length > 50) {
      errors.addressCountry = 'Pa√≠s deve ter no m√°ximo 50 caracteres';
    }
    
    return errors;
  }
  
  /**
   * Valida telefones
   */
  static validatePhones(formData: FarmFormState): ValidationErrors {
    const errors: ValidationErrors = {};
    
    if (!formData.phones || formData.phones.length === 0) {
      errors.phones = 'Pelo menos um telefone √© obrigat√≥rio';
      return errors;
    }
    
    formData.phones.forEach((phone) => {
      // Validar DDD
      if (!phone.ddd.trim()) {
        errors[`phone_${phone.id}_ddd`] = 'DDD √© obrigat√≥rio';
      } else if (phone.ddd.length !== 2 || !/^\d{2}$/.test(phone.ddd)) {
        errors[`phone_${phone.id}_ddd`] = 'DDD deve ter exatamente 2 d√≠gitos';
      }
      
      // Validar n√∫mero
      if (!phone.number.trim()) {
        errors[`phone_${phone.id}_number`] = 'N√∫mero do telefone √© obrigat√≥rio';
      } else if (!this.isValidPhoneNumber(phone.number)) {
        errors[`phone_${phone.id}_number`] = 'N√∫mero do telefone deve ter 8 ou 9 d√≠gitos';
      }
      
      // Tipo √© opcional no backend, mas pode ser validado se necess√°rio
      // if (!phone.type) {
      //   errors[`phone_${phone.id}_type`] = 'Tipo do telefone √© obrigat√≥rio';
      // }
    });
    
    return errors;
  }
  
  /**
   * Valida CPF
   */
  static isValidCPF(cpf: string): boolean {
    // Remove caracteres n√£o num√©ricos
    const cleanCPF = cpf.replace(/\D/g, '');
    
    // Verifica se tem 11 d√≠gitos
    if (cleanCPF.length !== 11) return false;
    
    // Verifica se todos os d√≠gitos s√£o iguais
    if (/^(\d)\1{10}$/.test(cleanCPF)) return false;
    
    // Valida√ß√£o do primeiro d√≠gito verificador
    let sum = 0;
    for (let i = 0; i < 9; i++) {
      sum += parseInt(cleanCPF.charAt(i)) * (10 - i);
    }
    let remainder = (sum * 10) % 11;
    if (remainder === 10 || remainder === 11) remainder = 0;
    if (remainder !== parseInt(cleanCPF.charAt(9))) return false;
    
    // Valida√ß√£o do segundo d√≠gito verificador
    sum = 0;
    for (let i = 0; i < 10; i++) {
      sum += parseInt(cleanCPF.charAt(i)) * (11 - i);
    }
    remainder = (sum * 10) % 11;
    if (remainder === 10 || remainder === 11) remainder = 0;
    if (remainder !== parseInt(cleanCPF.charAt(10))) return false;
    
    return true;
  }
  
  /**
   * Valida CEP
   */
  static isValidCEP(cep: string): boolean {
    // Remove caracteres n√£o num√©ricos
    const cleanCEP = cep.replace(/\D/g, '');
    
    // Verifica se tem 8 d√≠gitos
    return cleanCEP.length === 8;
  }
  
  /**
   * Valida telefone completo (com DDD)
   */
  static isValidPhone(phone: string): boolean {
    // Remove caracteres n√£o num√©ricos
    const cleanPhone = phone.replace(/\D/g, '');
    
    // Verifica se tem entre 10 e 11 d√≠gitos (com DDD)
    return cleanPhone.length >= 10 && cleanPhone.length <= 11;
  }
  
  /**
   * Valida apenas o n√∫mero do telefone (sem DDD)
   */
  static isValidPhoneNumber(phoneNumber: string): boolean {
    // Remove caracteres n√£o num√©ricos
    const cleanNumber = phoneNumber.replace(/\D/g, '');
    
    // Verifica se tem 8 ou 9 d√≠gitos
    return cleanNumber.length >= 8 && cleanNumber.length <= 9;
  }
}

export default FarmValidator;