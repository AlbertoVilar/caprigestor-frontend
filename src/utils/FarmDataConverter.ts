// 游댃 Conversor de dados para fazenda

import { FarmFormState, GoatFarmFullRequest } from '../types/farmTypes';

/**
 * Classe respons치vel pela convers칚o de dados entre formul치rio e API
 */
export class FarmDataConverter {
  
  /**
   * Converte dados do formul치rio para o formato da API
   * @param formData - Dados do formul치rio
   * @returns Dados no formato da API
   */
  static formToApiRequest(formData: FarmFormState): GoatFarmFullRequest {
    const farmData = {
      name: formData.farmName.trim(),
      tod: formData.farmTod.trim()
    };
    
    return {
      farm: farmData,
      user: {
        name: formData.userName.trim(),
        email: formData.userEmail.trim().toLowerCase(),
        cpf: this.cleanCPF(formData.userCpf),
        password: formData.userPassword,
        confirmPassword: formData.userConfirmPassword,
        roles: [formData.userRoles]
      },
      address: {
        street: formData.addressStreet.trim(),
        complement: formData.addressComplement?.trim() || undefined,
        neighborhood: formData.addressNeighborhood.trim(),
        city: formData.addressCity.trim(),
        state: formData.addressState.trim().toUpperCase(),
        zipCode: this.cleanCEP(formData.addressPostalCode),
        country: formData.addressCountry.trim()
      },
      phones: formData.phones.map(phone => ({
        ddd: phone.ddd.trim(),
        number: this.cleanPhone(phone.number)
      }))
    };
  }
  
    /**
   * Formata CPF para exibi칞칚o (XXX.XXX.XXX-XX)
   * @param cpf - CPF sem formata칞칚o
   * @returns CPF formatado
   */
  static formatCPF(cpf: string | null | undefined): string {
    if (!cpf) {
      return '';
    }
    const cleanCPF = cpf.replace(/\D/g, '');
    
    if (cleanCPF.length <= 3) {
      return cleanCPF;
    } else if (cleanCPF.length <= 6) {
      return `${cleanCPF.slice(0, 3)}.${cleanCPF.slice(3)}`;
    } else if (cleanCPF.length <= 9) {
      return `${cleanCPF.slice(0, 3)}.${cleanCPF.slice(3, 6)}.${cleanCPF.slice(6)}`;
    } else {
      return `${cleanCPF.slice(0, 3)}.${cleanCPF.slice(3, 6)}.${cleanCPF.slice(6, 9)}-${cleanCPF.slice(9, 11)}`;
    }
  }
  
  /**
   * Formata CEP para exibi칞칚o (XXXXX-XXX)
   * @param cep - CEP sem formata칞칚o
   * @returns CEP formatado
   */
  static formatCEP(cep: string | null | undefined): string {
    if (!cep) {
      return '';
    }
    const cleanCEP = cep.replace(/\D/g, '');
    
    if (cleanCEP.length <= 5) {
      return cleanCEP;
    } else {
      return `${cleanCEP.slice(0, 5)}-${cleanCEP.slice(5, 8)}`;
    }
  }
  
  /**
   * Formata telefone para exibi칞칚o ((XX) XXXXX-XXXX ou (XX) XXXX-XXXX)
   * @param phone - Telefone sem formata칞칚o
   * @returns Telefone formatado
   */
  static formatPhone(phone: string): string {
    const cleanPhone = phone.replace(/\D/g, '');
    
    if (cleanPhone.length <= 2) {
      return cleanPhone;
    } else if (cleanPhone.length <= 6) {
      return `(${cleanPhone.slice(0, 2)}) ${cleanPhone.slice(2)}`;
    } else if (cleanPhone.length <= 10) {
      return `(${cleanPhone.slice(0, 2)}) ${cleanPhone.slice(2, 6)}-${cleanPhone.slice(6)}`;
    } else {
      return `(${cleanPhone.slice(0, 2)}) ${cleanPhone.slice(2, 7)}-${cleanPhone.slice(7, 11)}`;
    }
  }
  
  /**
   * Formata valor monet치rio para exibi칞칚o
   * @param value - Valor num칠rico
   * @returns Valor formatado em reais
   */
  static formatCurrency(value: number): string {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  }
  
  /**
   * Formata 치rea para entrada no formul치rio (aceita string)
   * @param area - 츼rea como string
   * @returns 츼rea formatada para exibi칞칚o
   */
  static formatArea(area: string): string {
    const cleanArea = area.replace(/[^0-9,.,]/g, '');
    const normalizedArea = cleanArea.replace(',', '.');
    
    if (!normalizedArea || normalizedArea === '.') {
      return '';
    }
    
    // Limita a 2 casas decimais
    const parts = normalizedArea.split('.');
    if (parts.length > 2) {
      return parts[0] + '.' + parts[1].substring(0, 2);
    }
    if (parts[1] && parts[1].length > 2) {
      return parts[0] + '.' + parts[1].substring(0, 2);
    }
    
    return normalizedArea;
  }
  
  /**
   * Remove formata칞칚o do CPF
   * @param cpf - CPF formatado
   * @returns CPF apenas com n칰meros
   */
  static cleanCPF(cpf: string): string {
    return cpf.replace(/\D/g, '');
  }
  
  /**
   * Remove formata칞칚o do CEP
   * @param cep - CEP formatado
   * @returns CEP apenas com n칰meros
   */
  static cleanCEP(cep: string): string {
    return cep.replace(/\D/g, '');
  }
  
  /**
   * Remove formata칞칚o do telefone e c칩digo do pa칤s se presente
   * @param phone - Telefone formatado
   * @returns Telefone apenas com n칰meros (sem c칩digo do pa칤s)
   */
  static cleanPhone(phone: string): string {
    let cleanNumber = phone.replace(/\D/g, '');
    
    // Remove c칩digo do pa칤s (55) se presente no in칤cio
    if (cleanNumber.startsWith('55') && cleanNumber.length > 10) {
      cleanNumber = cleanNumber.substring(2);
    }
    
    return cleanNumber;
  }
  
  /**
   * Converte string para n칰mero com tratamento de erro
   * @param value - String a ser convertida
   * @param defaultValue - Valor padr칚o em caso de erro
   * @returns N칰mero convertido
   */
  static parseNumber(value: string, defaultValue: number = 0): number {
    const parsed = parseFloat(value);
    return isNaN(parsed) ? defaultValue : parsed;
  }
  
  /**
   * Capitaliza primeira letra de cada palavra
   * @param text - Texto a ser capitalizado
   * @returns Texto capitalizado
   */
  static capitalizeWords(text: string): string {
    return text
      .toLowerCase()
      .split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }
  
  /**
   * Valida e limita o comprimento de um texto
   * @param text - Texto a ser validado
   * @param maxLength - Comprimento m치ximo
   * @returns Texto limitado
   */
  static limitText(text: string, maxLength: number): string {
    return text.length > maxLength ? text.slice(0, maxLength) : text;
  }
  
  /**
   * Gera um ID 칰nico para telefones
   * @returns ID 칰nico
   */
  static generatePhoneId(): string {
    return `phone_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  
  /**
   * Cria um novo telefone vazio/**
   * Cria um objeto de telefone vazio
   */
  static createEmptyPhone() {
    return {
      id: this.generatePhoneId(),
      ddd: '',
      number: '',
      type: 'MOBILE' as const
    };
  }
  
  /**
   * Converte string de 치rea para n칰mero
   * @param areaString - String da 치rea
   * @returns N칰mero da 치rea ou undefined se inv치lido
   */
  static parseAreaFromString(areaString: string): number | undefined {
    if (!areaString || areaString.trim() === '') {
      return undefined;
    }
    
  const cleanArea = areaString.replace(/[^0-9,.,]/g, '').replace(',', '.');
    const parsed = parseFloat(cleanArea);
    
    return !isNaN(parsed) && isFinite(parsed) && parsed > 0 ? parsed : undefined;
  }

  /**
   * Valida se um valor 칠 um n칰mero v치lido
   * @param value - Valor a ser validado
   * @returns true se for um n칰mero v치lido
   */
  static isValidNumber(value: string): boolean {
    const num = parseFloat(value);
    return !isNaN(num) && isFinite(num) && num > 0;
  }
  
  /**
   * Converte data para formato brasileiro
   * @param date - Data em formato ISO
   * @returns Data formatada (DD/MM/AAAA)
   */
  static formatDate(date: string): string {
    try {
      const dateObj = new Date(date);
      return dateObj.toLocaleDateString('pt-BR');
    } catch {
      return date;
    }
  }
  
  /**
   * Converte data e hora para formato brasileiro
   * @param datetime - Data e hora em formato ISO
   * @returns Data e hora formatadas (DD/MM/AAAA HH:mm)
   */
  static formatDateTime(datetime: string): string {
    try {
      const dateObj = new Date(datetime);
      return dateObj.toLocaleString('pt-BR');
    } catch {
      return datetime;
    }
  }
}

export default FarmDataConverter;